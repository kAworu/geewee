#!/usr/bin/env ruby
#
#   __ _  ___  _____      _____  ___
#  / _` |/ _ \/ _ \ \ /\ / / _ \/ _ \
# | (_| |  __/  __/\ V  V /  __/  __/
#  \__, |\___|\___| \_/\_/ \___|\___|
#  |___/
#
# geewee client, see http://hg.kaworu.ch/rails-geewee.
#   this client need json in order to be able to use the geewee JSON API.
#
require 'yaml'
require 'rubygems'

begin
    require 'json'
    #require 'json/add/rails'
rescue LoadError => e
    STDERR.puts <<-EOF
#{e.class}: #{e}

    this client need json in order to be able to use the geewee JSON API.
    please run:
        gem install json_pure
    or
        gem install json
    EOF
    exit 1
end

# main procedure called if this script is executed.
def main
    # FIXME: UGLY UGLY UGLY
    # basic config setup.
    $config = YAML.load(DATA.read)
    unless $config and $config['base_url']
        err "Config is missing `base_url'"
    end
    unless $config['editor'] or $config['editor'] = ENV['EDITOR']
        err "please set `editor' in config or $EDITOR in env."
    end
    unless $config['geewee_api_key']
        err "please set `geewee_api_key' in config."
    end

    if ARGV.size < 2
        usage 'wrong # of arguments'
        exit 1
    end

    operation = ARGV.shift
    resource  = ARGV.shift
    argv      = ARGV

    # find the resource wanted.
    rclass = Geewee::Resources::detect(resource.downcase.to_sym)
    usage "couldn't find resource #{resource}" unless rclass
    r = rclass.new Geewee::REST::Connection.new($config['base_url'],
     :default_args => { :geewee_api_key => $config['geewee_api_key'], :locale => :en })
    begin
        r.apply :operation  => operation.downcase.to_sym,
                :argv       => argv
    rescue Errno::ECONNREFUSED
        err "#{$config['base_url']} #$!"
    rescue Geewee::Resources::Base::BadOperation
        usage $!
    rescue Geewee::RequestError, Geewee::RFile::Error
        err $!
    rescue Interrupt
        puts
        warn 'Interupted! bye bye.'
    end
end


# Extending ruby for greater justice. {{{
#   some handy functions that would end in a utils.rb file.
#

F = File.basename($0)

# dynamic usage function.
def usage message
    STDERR.puts
    STDERR.puts "#{F}: #{message}"
    STDERR.puts
    STDERR.puts "usage: #{F} operation ressource [arguments...]"
    STDERR.puts
    STDERR.puts "CRUD operations:"
    STDERR.puts "===============>"
    STDERR.puts "\t#{F} create ressource"
    STDERR.puts "\t#{F} create ressource /path/to/file"
    STDERR.puts "\t#{F} show resource"
    STDERR.puts "\t#{F} show resource id"
    STDERR.puts "\t#{F} update ressource"
    STDERR.puts "\t#{F} update ressource id"
    STDERR.puts "\t#{F} update ressource id /path/to/file"
    STDERR.puts "\t#{F} destroy ressource"
    STDERR.puts "\t#{F} destroy ressource id"

    # Build the operation -> resource help.
    h = Hash.new
    Geewee::Resources.all.each do |r|
        r.operations.keys.each do |op|
            (h[op] ||= Array.new) << r
        end
    end
    # and  display it
    STDERR.puts
    STDERR.puts "operations and resources:"
    STDERR.puts "========================>"
    h.each do |op, rs|
        rsstr = rs.collect { |r| r.resources.join('|') }.join(', ')
        STDERR.puts '- %10s: %s' % [op, rsstr]
    end
    exit
end

# really simple error familiy functions.
def info message
    puts "===> #{message}"
end

def warn message
    STDERR.puts "!!!> #{message}"
end

def err message
    STDERR.puts "#{F}: #{message}"
    exit 1
end

# ask the user.
def ask question
    STDOUT.print "???> #{question}"
    STDOUT.flush
    STDIN.gets.chomp
end

# ask the user to answer by yes or no.
def yesno question
    ans = String.new
    until ans =~ /^\s*(?:y(?:es)?|no?)\s*$/i
        ans = ask(question + '? [y/n]: ')
    end
    ans =~ /y(?:es)?/
end

# Object#instance_eval can't pass arguments to the block. Ruby 1.9 will define
# Object#instance_exec but for 1.8 we hack it.
#   see http://www.ruby-forum.com/topic/54096.
class Object
    def instance_exec(*args, &block)
        mname = "__instance_exec_#{Thread.current.object_id.abs}"
        class << self; self end.class_eval{ define_method(mname, &block) }
        begin
            ret = send(mname, *args)
        ensure
            class << self; self end.class_eval{ undef_method(mname) } rescue
            nil
        end
        ret
    end
end if RUBY_VERSION < '1.9.0'
# }}}

# My Shiny Geewee module <3
module Geewee
# stolen and hacked REST module {{{
#   from http://snipplr.com/view.php?codeview&id=2476
#
require 'net/https'
module REST

    # all HTTP methods.
    Methods = {
        :GET    => Net::HTTP::Get,
        :POST   => Net::HTTP::Post,
        :PUT    => Net::HTTP::Put,
        :DELETE => Net::HTTP::Delete,
    }

    # HTTP connection handler class.
    class Connection
        def initialize(base_url, args=Hash.new)
            @base_url = base_url
            @username = args[:username]
            @password = args[:password]
            @default_args = args[:default_args] || Hash.new
        end

        # send the HTTP request, method should be a key of Methods.
        def request(resource, method, args)
            args = @default_args.merge(args || Hash.new)
            url  = URI.join(@base_url, resource)

            req = Methods[method].new(url.request_uri)
            req.form_data = args

            if @username and @password
                req.basic_auth(@username, @password)
            end

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = (url.port == 443)

            res = http.start { |conn| conn.request(req) }
            res
        end
    end
end
# }}}

# Resources module and bases classes {{{
#   modules and functions used to implements Resources management.
#

# contains all Resources and find them.
module Resources
    # This is where all Resources classes belongs.
    module All end

    # return all Resources in the All module, as Class objects.
    def self.all
        self::All.constants.collect { |const| eval "self::All::#{const}" }
    end

    # Auto-detect available resources.
    #   target argument must be a symbol.
    def self.detect target
        all.each do |klass|
            return klass if klass.resources.include?(target)
        end
        nil # couldn't find it!
    end
end

# Base class for Resources.
class Resources::Base
    All = [:create, :show, :update, :destroy]

    # raised when an operation is not supported by a ressource instance.
    class BadOperation < Exception
    end

    # conn is a REST::Connection instance.
    def initialize conn
        @conn = conn
    end

    # Array of name matching this Resource.
    #   it's composed of symbols like [:category, :categories] that are alias.
    #   The first symbol is used as reference name for HTTP request.
    def self.resources
        # NOTE: the current context is class, so it is a class instance
        #       variable.
        @resources ||= Array.new
    end

    # Hash of supported operations for this class.
    #   it's a Hash from operations keys (like :show) to lambda functions that
    #   take two arguments, id and file (that can be nil).
    def self.operations
        # NOTE: the current context is class, so it is a class instance
        #       variable.
        @operations ||= Hash.new
    end

    # Do the given action if possible.
    def apply h
        ops = self.class.operations
        unless ops.key?(h[:operation])
            raise BadOperation.new("#{h[:operation]}: operation not supported by #{self.class}")
        else
            f = ops[h[:operation]]
            instance_exec(h, &f)
        end
    end

    # declare aliases for the resource.
    def self.alias_resource *list
        # add them at the end
        (resources << list).flatten!
    end

    protected

    # declare which name this resource is responsible for, used for HTTP request.
    def self.named_resource name
        # put it as first element.
        resources.unshift name
    end

    # declare which operations are accepted.
    def self.accept(op, &block)
        operations[op] = block
    end

    # helpers for HTTP request.
    def get(id=nil, args=nil)
        request(id, :GET, args)
    end
    def post(id=nil, args=nil)
        request(id, :POST, args)
    end
    def put(id=nil, args=nil)
        request(id, :PUT, args)
    end
    def delete(id=nil, args=nil)
        request(id, :DELETE, args)
    end

    def request(id, method, args)
        if id and not args and id.is_a?(Hash)
            args = id
            id = nil
        end
        resource =  '/' + self.class.resources.first.to_s
        resource << "/#{id}" if id
        resource << '.json'
        @conn.request(resource, method, args)
    end
end

# Resource File
#   Handle a human readable Resource description.
#   RFile looks like email, a header of key:values, an empty line and a body.
class RFile
    # RFile exceptions classes.
    class Error < StandardError
    end
    class ParseError < Error
    end

    attr_accessor :head, :body, :path

    # crate a new RFile with a path to load.
    def self.load(path)
        rf = RFile.new
        rf.path = path
        rf.parse!
    end

    # create a new RFile.
    #   if head is an Array, it is a list of empty header keys.
    def initialize(head=nil)
        @head = Hash.new
        head.each { |k,v| @head[k] = v } if head
        @body = String.new
    end

    # parse a file argument, if `-' STDIN is used.
    def parse!
        fd    = if @path == '-' then STDIN else File.open(@path) end
        data  = fd.read
        @head = Hash.new
        @body = String.new

        parse_head = true
        data.split("\n").each do |line|
            if parse_head
                if line.empty?
                    parse_head = false
                elsif line =~ /^(.+?):(.*)$/
                    @head[$1.strip] = $2.strip
                else
                    raise ParseError.new("#@path: bad RFile header line: #{line}")
                end
            else
                @body << line << "\n"
            end
        end
        self
    end

    def to_s
        s = String.new
        @head.each { |k,v| s << "#{k}: #{v}\n" }
        s << "\n"
        s << @body
    end

    # call editor to edit self. return self if all went well, raise a
    # RuntimeError if the editor returned a non-zero status.
    def edit!
        @path = "/tmp/#{F}_#{Time.now.to_i}#$$"
        File.open(@path, 'w') { |fd| fd << self.to_s }
        if system "#{$config['editor']} #@path" then
            self.parse!
        else
            raise Error.new("editor aborded (file was #{@path})")
        end
    end
end


# raised when the server return a request error.
class RequestError < StandardError
    attr_reader :response, :rfile

    def initialize(response, rfile=nil)
        @response = response
        @rfile    = rfile
    end

    def to_s
        s = super + ": #@response"
        s << " (file was #{@rfile.path})" rescue s
    end
end
# }}}

# Category Resource {{{
#   show, create, edit and destroy operations are allowed.
#
class Resources::All::Category < Resources::Base
    private
    # keys for the geewee API.
    module Keys
        DISPLAY_NAME = '[category]display_name'
    end

    # accept plural form
    named_resource :categories

    # always display a list of Category.
    #   show categories
    #   show categories id
    accept :show do |h|
        id = h[:argv].first rescue nil

        case response = get(id)
        when ::Net::HTTPOK
            if id
                cs = [JSON.parse(response.body)]
            else
                cs = JSON.parse(response.body)
            end
            cs.each { |h| display h['category'] }
        else
            raise RequestError.new(response)
        end
    end

    # create a new category.
    #   generate a stub file and call editor:
    #       create categories
    #   load from STDIN:
    #       create categories -
    #   load from file:
    #       create categories /path/to/stub/file
    accept :create do |h|
        file = h[:argv].first rescue nil
        if file
            rf = RFile.load(file)
        else
            rf = RFile.new([Keys::DISPLAY_NAME]).edit!
        end
        case response = post(rf.head)
        when ::Net::HTTPCreated
            info 'new Category created:'
            display JSON.parse(response.body)['category']
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join("\n")
            raise RequestError.new(msg, rf)
        end
    end

    # update a category.
    #   update categories
    #   update categories 1
    #   update categories 1 /path/to/file
    accept :update do |h|
        h[:argv] ||= Array.new

        unless id = h[:argv].shift
            # show categories and ask for id.
            self.apply  :operation => :show
            id = ask('target Category id to update: ')
        end
        case response = get(id)
        when ::Net::HTTPOK
            c = JSON.parse(response.body)['category']
        else
            raise RequestError.new(response)
        end

        if file = h[:argv].shift
            rf = RFile.load(file)
        else
            rf = RFile.new(Keys::DISPLAY_NAME => c['display_name']).edit!
        end

        case response = put(c['id'], rf.head)
        when ::Net::HTTPOK
            info 'Category updated.'
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join("\n")
            raise RequestError.new(msg, rf)
        end
    end

    # destroy a category.
    #   destroy categories
    #   destroy categories 1
    accept :destroy do |h|
        id = h[:argv].first rescue nil
        unless id
            # show categories and ask for id.
            self.apply :operation => :show
            id = ask('target Category id to destroy: ')
        end
        self.apply :operation => :show, :argv => [id]
        if yesno('destroy')
            case response = delete(id)
            when ::Net::HTTPOK
                info 'destroyed.'
            else
                msg = JSON.parse(response.body).collect do |err|
                    err.join(' ')
                end.join(", ")
                raise RequestError.new(msg)
            end
        end
    end

    # print category on stdout
    def display c
        puts '%3d. %s (%d)' % [c['id'], c['display_name'], c['posts'].size]
    end
end
# }}}

# Posts Resource {{{
#   show, create, update, destroy, and publish operations are allowed.
#
class Resources::All::Post < Resources::Base
    private
    # for displaying and asking category on create.
    Category = Resources::All::Category

    # keys for the geewee API.
    module Keys
        TITLE     = '[post]title'
        TAGS      = '[post]tag_list'
        PUBLISHED = '[post]published'
        CATEGORY  = '[post]category_id'
        INTRO     = '[post]intro'
        BODY      = '[post]body'
    end

    # accept plural form
    named_resource :posts

    # display a list of posts, or a post.
    #   show posts
    #   show posts id
    accept :show do |h|
        id = h[:argv].first rescue nil

        case response = get(id)
        when ::Net::HTTPOK
            if id
                display JSON.parse(response.body)['post']
            else
                JSON.parse(response.body).reverse.each do |h|
                    post = h['post']
                    pubstr = (post['published'] ? '' : '[unpublished] ')
                    print '%3d. %s"%s"' % [post['id'], pubstr, post['title']]
                    puts ' by %s in %s (%s)' % [post['author']['name'],
                        post['category']['display_name'], tags_to_s(post['tags'])]
                end
            end
        else
            raise RequestError.new(response)
        end
    end

    # create a new post.
    #   generate a stub file and call editor:
    #       create posts
    #   load from STDIN:
    #       create posts -
    #   load from file:
    #       create posts /path/to/stub/file
    accept :create do |h|
        file = h[:argv].first rescue nil
        if file
            rf = RFile.load(file)
        else
            rf = stubize.edit!
            rf.head[Keys::PUBLISHED] = (yesno('publish now') ? '1' : '0')
        end
        fill_intro_n_body(rf)
        case response = post(rf.head)
        when ::Net::HTTPCreated
            info "new Post created: #{response['Location']}"
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join(", ")
            raise RequestError.new(msg, rf)
        end
    end

    # update a post.
    #   update posts
    #   update posts 1
    #   update posts 1 /path/to/file
    accept :update do |h|
        h[:argv] ||= Array.new

        unless id = h[:argv].shift
            # show posts and ask for id.
            self.apply  :operation => :show
            id = ask('target Post id to update: ')
        end
        case response = get(id)
        when ::Net::HTTPOK
            p = JSON.parse(response.body)['post']
        else
            raise RequestError.new(response)
        end

        if file = h[:argv].shift
            rf = RFile.load(file)
        else
            rf = RFile.new Keys::TITLE      => p['title'],
                           Keys::TAGS       => tags_to_s(p['tags']),
                           Keys::PUBLISHED  => (p['published'] ? '1' : '0'),
                           Keys::CATEGORY   => p['category_id']
            rf.body = p['intro']
            rf.body << "%...\n" << p['body'] if p['body']
            rf.edit!
        end
        fill_intro_n_body(rf)

        case response = put(p['id'], rf.head)
        when ::Net::HTTPOK
            info "Post updated: #{response['Location']}"
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join("\n")
            raise RequestError.new(msg, rf)
        end
    end

    # destroy a post.
    #   destroy posts
    #   destroy posts 1
    accept :destroy do |h|
        id = h[:argv].first rescue nil
        unless id
            # show posts and ask for id.
            self.apply :operation => :show
            id = ask('target Post id to destroy: ')
        end
        self.apply :operation => :show, :argv => [id]
        if yesno('destroy')
            case response = delete(id)
            when ::Net::HTTPOK
                info 'destroyed.'
            else
                msg = JSON.parse(response.body).collect do |err|
                    err.join(' ')
                end.join(", ")
                raise RequestError.new(msg)
            end
        end
    end

    # publish a post.
    #   publish posts
    #   publish posts 1
    accept :publish do |h|
        id = h[:argv].first rescue nil
        unless id
            # show posts and ask for id.
            self.apply :operation => :show
            id = ask('target Post id to publish: ')
        end
        case response = put("publish/#{id}")
        when ::Net::HTTPOK
            info 'published.'
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join(", ")
            raise RequestError.new(msg)
        end
    end

    # print post on stdout
    def display post
        puts "created_at: #{post['created_at']}"
        puts "updated_at: #{post['updated_at']}"
        puts "id:       #{post['id']}"
        puts "author:   #{post['author']['name']}"
        puts "category: #{post['category']['display_name']}"
        puts "tags:     #{tags_to_s(post['tags'])}"
        puts "title:    #{post['title']}"
        puts
        puts post['intro']
        puts "\n%...\n" + post['body'] if post['body']
    end

    # pretty print of tags.
    def tags_to_s tags
        tags.collect { |t| t['name'] }.join(', ')
    end

    # create a stub RFile.
    def stubize
        cid = String.new
        c = Category.new(@conn)
        c.apply :operation => :show
        until cid =~ /^\d+$/
            cid = ask('Choose a Category id (n to create a new one): ')
            if cid == 'n'
                c.apply :operation => :create rescue warn $!
                c.apply :operation => :show
            end
        end
        head = {
            Keys::TITLE     => nil,
            Keys::TAGS      => nil,
            Keys::CATEGORY  => cid
        }
        rf = RFile.new(head)
        rf.body << "*Intro*\n\n%...\n\n*Body*"
        rf
    end

    # parse rf.body to split into the intro and body part of the post.
    def fill_intro_n_body rf
        s = rf.body
        rf.body = ""
        a = s.split(/^%\.\.\.\s*$/)
        rf.head[Keys::INTRO] = a[0]
        rf.head[Keys::BODY]  = a[1]
    end
end
# }}}
#
# Static Page Resource {{{
#   TODO doc
#
class Resources::All::Page < Resources::Base
    private

    # keys for the geewee API.
    module Keys
        TITLE = '[page]title'
        BODY  = '[page]body'
    end

    # accept plural form
    named_resource :pages

    # display the list of pages.
    #   show pages
    #   show pages id
    accept :show do |h|
        id = h[:argv].first rescue nil

        case response = get(id)
        when ::Net::HTTPOK
            if id
                page = JSON.parse(response.body)['page']
                puts "id: #{page['id']}"
                puts "created_at: #{page['created_at']}"
                puts "updated_at: #{page['updated_at']}"
                puts "title:      #{page['title']}"
                puts "subtitle:   #{page['subtitle']}"
                puts "\n" + \
                    page['body']
            else
                JSON.parse(response.body).each do |page|
                    p = page['page']
                    puts '%3d. %s' % [p['id'], p['title']]
                end
            end
        else
            raise RequestError.new(response)
        end
    end

    # create a new page.
    #   generate a stub file and call editor:
    #       create pages
    #   load from STDIN:
    #       create pages -
    #   load from file:
    #       create pages /path/to/stub/file
    accept :create do |h|
        file = h[:argv].first rescue nil
        if file
            rf = RFile.load(file)
        else
            rf = RFile.new([Keys::TITLE]).edit!
        end
        # load the body into the proper header key.
        rf.head[Keys::BODY] = rf.body
        rf.body = ""
        case response = post(rf.head)
        when ::Net::HTTPCreated
            info "new Post created: #{response['Location']}"
        else
            msg = JSON.parse(response.body).collect do |err|
                err.join(' ')
            end.join(", ")
            raise RequestError.new(msg, rf)
        end
    end

    # parse rf.body to split into the intro and body part of the post.
    def fill_body rf
        s = rf.body
        rf.body = ""
        a = s.split(/^%\.\.\.\s*$/)
        rf.head[Keys::INTRO] = a[0]
        rf.head[Keys::BODY]  = a[1]
    end
end
# }}}
end # end of Geewee module.


# run main procedure if we're executed!
main if $0 == __FILE__


###
# Config for the geewee client in YAML, example:
=begin

---
base_url:       http://my.sexy.geewee/blog/path
editor:         vi
geewee_api_key: my_secret_single_access_token

=end


__END__
---
base_url:       http://localhost:3000
editor:         vim
geewee_api_key: PLs_gVBZwd5EudsRMObO
